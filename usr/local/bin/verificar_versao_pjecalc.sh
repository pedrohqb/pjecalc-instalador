#!/bin/bash
#
# Autor: Fernando Souza - https://www.youtube.com/@fernandosuporte/
#
# Data:     13/04/2025 as 17:36:18
# Homepage: https://github.com/tuxslack/pjecalc-instalador
# Licen√ßa:  MIT


# Execu√ß√£o agendada (cron)

# Adicionar no crontab do usu√°rio:

# (crontab -l 2>/dev/null; echo "0 10 * * * /usr/local/bin/verificar_versao_pjecalc.sh >> $LOG_FILE 2>&1") | crontab -
# echo "Tarefa agendada para verificar atualiza√ß√£o diariamente √†s 10h."



# Logs de atualiza√ß√£o

log="/tmp/pjecalc-update.log"


# URL da p√°gina de instala√ß√£o

URL="https://www.trt8.jus.br/pjecalc-cidadao/instalando-o-pje-calc-cidadao"


logo="/usr/share/pixmaps/icone_calc.ico"


# Auto-atualiza√ß√£o do PJeCalc



clear


# ----------------------------------------------------------------------------------------

# Para verificar se os programas est√£o instalados


which yad           1> /dev/null 2> /dev/null || { echo "Programa Yad n√£o esta instalado."      ; exit ; }


verificar_programa() {

    if ! which "$1" &> /dev/null; then


        echo  "O programa $1 n√£o est√° instalado." >> "$log"

        yad --center \
            --title="Depend√™ncia ausente" \
            --window-icon="$logo" --image="$logo" \
            --text="O programa <b>$1</b> n√£o est√° instalado.\n\nInstale-o antes de continuar." \
            --buttons-layout="center" \
            --button="OK" \
            --width="400" 2> /dev/null

        exit 1
    fi

}


# Verifica√ß√µes

verificar_programa notify-send
verificar_programa grep
verificar_programa curl
verificar_programa 7z
verificar_programa cut
verificar_programa java
verificar_programa wget
verificar_programa cp
verificar_programa ping
verificar_programa pgrep
verificar_programa sort



# find /usr/share/icons/ -iname *gtk-dialog*


# ----------------------------------------------------------------------------------------

echo "
Testando conex√£o com √† internet...
"

if ! ping -c 1 www.google.com.br -q &> /dev/null; then


    echo  "Sistema n√£o tem conex√£o com √† internet." >> "$log"

    echo -e "\033[1;31m[ERRO] - Seu sistema n√£o tem conex√£o com √† internet. Verifique os cabos e o modem.\n \033[0m"
    
    sleep 10
    
    yad \
    --center \
    --window-icon="$logo" \
    --image=dialog-error \
    --title "Aviso" \
    --fontname "mono 10"  \
    --text="\nSeu sistema n√£o tem conex√£o com √† internet. Verifique os cabos e o modem.\n" \
    --buttons-layout="center" \
    --button="OK"  \
    --width="600" --height="100"  \
    2> /dev/null
    
    
    exit 1
    
    else
    
    echo -e "\033[1;32m[VERIFICADO] - Conex√£o com √† internet funcionando normalmente. \033[0m"
    
    sleep 2
    
fi


# ----------------------------------------------------------------------------------------


# Baixar o conte√∫do da p√°gina e procurar o link do instalador

if [[ $(uname -m) == x86_64 ]]; then

# Instalador PJe-Calc Cidad√£o 64bits

# echo -e "\nPJe-Calc Cidad√£o 64bits \n"

arch="x64"

VERSAO=$(curl -s "$URL" 2> /dev/null | grep -oP 'pjecalc-[0-9]+\.[0-9]+\.[0-9]+(?=-instalador-x64\.exe)' | head -n 1)

else

# Instalador PJe-Calc Cidad√£o 32bits

# echo -e "\nPJe-Calc Cidad√£o 32bits \n"

arch="x32"

VERSAO=$(curl -s "$URL" 2> /dev/null | grep -oP 'pjecalc-[0-9]+\.[0-9]+\.[0-9]+(?=-instalador-x32\.exe)' | head -n 1)

fi


# Para verificar se a variavel √© nula

if [ -z "$VERSAO" ];then


    echo -e "\033[1;31mVers√£o do PJe-Calc n√£o identificada no site...\n \033[0m"

    exit

fi


# Filtrar

VERSAO=$(echo ""$VERSAO | cut -d"-" -f2)


# Exibir a vers√£o do programa

VERSAO_SITE="$VERSAO"


# ----------------------------------------------------------------------------------------

# VERSAO INSTALADA


versao_instalada(){

# Detectar automaticamente a vers√£o do PJeCalc instalada.


# Caminho do pjecalc.jar (ajuste conforme necess√°rio)

JAR_PATH="$HOME/pjecalc/bin/pjecalc.jar"

# Verifica se o arquivo existe

if [ ! -f "$JAR_PATH" ]; then

    echo -e "\033[1;31m\n[ERRO] - ‚ùå Arquivo $JAR_PATH n√£o encontrado. \n\033[0m"

    exit 1
fi

# Tenta extrair a vers√£o do MANIFEST.MF

VERSAO_ATUAL=$(unzip -p "$JAR_PATH" META-INF/MANIFEST.MF 2>/dev/null | grep -iE 'Implementation-Version|version' | head -n1 | awk -F': ' '{print $2}' | tr -d '\r')

# Caso n√£o encontre, define mensagem padr√£o

if [ -z "$VERSAO_ATUAL" ]; then

    echo -e "\033[1;31m[ERRO] - ‚ùå N√£o foi poss√≠vel detectar a vers√£o do PJeCalc no $JAR_PATH \033[0m"

    exit 1
fi

# Exibe a vers√£o

echo "Vers√£o instalada do PJeCalc: $VERSAO_ATUAL"


}

# versao_instalada


# VERSAO_ATUAL="2.13.2"


# Verificar se tem o arquivo $HOME/PjeCalc/versao_instalada.txt

if [ -e "$HOME/PjeCalc/versao_instalada.txt" ]; then

VERSAO_ATUAL=$(cat $HOME/PjeCalc/versao_instalada.txt)


# Caso n√£o encontre, define mensagem padr√£o

if [ -z "$VERSAO_ATUAL" ]; then

    echo -e "\033[1;31m[ERRO] - ‚ùå N√£o foi poss√≠vel detectar a vers√£o do PJeCalc. \033[0m"

    exit 1
fi


# Exibe a vers√£o

echo -e "\nVers√£o instalada do PJeCalc: $VERSAO_ATUAL"

fi



# ----------------------------------------------------------------------------------------

# Se a vers√£o instalada for maior que a vers√£o do site n√£o mostra o aviso.

# Se a vers√£o instalada for menor do que o site mostra o aviso.


# Pega a menor vers√£o entre as duas (compara vers√µes)
# 
# Como funciona sort -V?
# 
#     Ele compara cada "peda√ßo" da vers√£o como n√∫mero:
# 
#     Ex:
# 
#     4.11.0 ‚Üí 4, 11, 0
# 
#     2.13.2 ‚Üí 2, 13, 2
# 
#     E faz a ordena√ß√£o correta, como se fossem vers√µes de software mesmo.


MENOR_VERSAO=$(printf '%s\n' "$VERSAO_ATUAL" "$VERSAO_SITE" | sort -V | head -n1)


# L√≥gica de verifica√ß√£o

if [ "$MENOR_VERSAO" != "$VERSAO_SITE" ]; then

        echo -e "\nüîî Sua vers√£o do PJeCalc est√° desatualizada.\n"



# ----------------------------------------------------------------------------------------

    if yad --center --window-icon=dialog-warning --image="$logo" --title="Atualiza√ß√£o dispon√≠vel" --text="Nova vers√£o do PJeCalc dispon√≠vel.\n\nVers√£o instalada: $VERSAO_ATUAL\nVers√£o dispon√≠vel: $VERSAO_SITE\n\nDeseja atualizar?" --buttons-layout="center" --button=N√£o:1 --button=Sim:0 --width="400" 2> /dev/null ; then



# ----------------------------------------------------------------------------------------

# Processo de atualiza√ß√£o


# Verificar se tem o arquivo /usr/local/bin/pjecalc-instalar-remover.sh

if [ -e "/usr/local/bin/pjecalc-instalar-remover.sh" ]; then

        echo -e "\nAtualizando para vers√£o $VERSAO_SITE..."

/usr/local/bin/pjecalc-instalar-remover.sh

else

    echo -e "\033[1;31m[ERRO] - ‚ùå Desculpe, n√£o foi poss√≠vel encontrar o atualizador do PJeCalc.\n\nVerifique a instala√ß√£o... \033[0m"

notify-send  \
-i "$logo" \
-t 200000 \
"Atualiza√ß√£o do PJeCalc..." "\nDesculpe, n√£o foi poss√≠vel encontrar o atualizador do PJeCalc.\n\nVerifique a instala√ß√£o..."

exit


fi

# ----------------------------------------------------------------------------------------


else

notify-send  \
-i "$logo" \
-t 200000 \
"Atualiza√ß√£o dispon√≠vel do PJeCalc..." "üîî Sua vers√£o do PJeCalc est√° desatualizada."

fi

        echo "
Vers√£o instalada:  $VERSAO_ATUAL 
Vers√£o dispon√≠vel: $VERSAO_SITE
"
    
    sleep 2


    echo -e "\033[1;31m[ERRO] - ‚ùå Usu√°rio optou por n√£o atualizar. \033[0m"


# ----------------------------------------------------------------------------------------


else

      echo -e "\033[1;32m\n‚úÖ PJeCalc est√° na vers√£o mais recente.\n \033[0m"


# notify-send  \
# -i "$logo" \
# -t 200000 \
# "PJeCalc atualizado..." "\n‚úÖ PJeCalc est√° na vers√£o mais recente.\n"


fi


exit 0

